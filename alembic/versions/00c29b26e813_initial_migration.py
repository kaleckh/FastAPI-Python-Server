"""Initial migration

Revision ID: 00c29b26e813
Revises: 
Create Date: 2024-10-31 10:49:18.238318

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '00c29b26e813'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('user_followers',
    sa.Column('user_id', sa.String(), nullable=True),
    sa.Column('follower_id', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['follower_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], )
    )
    op.create_table('user_following',
    sa.Column('user_id', sa.String(), nullable=True),
    sa.Column('following_id', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['following_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], )
    )
    op.create_table('bookmarks',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('user_id', sa.String(), nullable=True),
    sa.Column('post_id', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['post_id'], ['posts.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('comments',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('comment', sa.String(), nullable=False),
    sa.Column('vote', sa.String(), nullable=True),
    sa.Column('likes', sa.JSON(), nullable=True),
    sa.Column('dislikes', sa.JSON(), nullable=True),
    sa.Column('post_id', sa.String(), nullable=True),
    sa.Column('user_id', sa.String(), nullable=True),
    sa.Column('username', sa.String(), nullable=True),
    sa.Column('date', sa.DateTime(), nullable=True),
    sa.Column('parent_id', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['parent_id'], ['comments.id'], ),
    sa.ForeignKeyConstraint(['post_id'], ['posts.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('post_dislikes',
    sa.Column('post_id', sa.String(), nullable=True),
    sa.Column('user_id', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['post_id'], ['posts.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], )
    )
    op.create_table('post_likes',
    sa.Column('post_id', sa.String(), nullable=True),
    sa.Column('user_id', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['post_id'], ['posts.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], )
    )
    op.create_table('post_voted',
    sa.Column('post_id', sa.String(), nullable=True),
    sa.Column('user_id', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['post_id'], ['posts.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], )
    )
    op.create_table('votes',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('vote', sa.String(), nullable=True),
    sa.Column('user_id', sa.String(), nullable=True),
    sa.Column('post_id', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['post_id'], ['posts.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.drop_table('Comment')
    op.drop_table('_prisma_migrations')
    op.add_column('conversations', sa.Column('room_name', sa.String(), nullable=True))
    op.alter_column('conversations', 'id',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('conversations', 'me',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               nullable=True)
    op.alter_column('conversations', 'recipient',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               nullable=True)
    op.alter_column('conversations', 'date',
               existing_type=postgresql.TIMESTAMP(precision=3),
               nullable=True)
    op.drop_column('conversations', 'roomName')
    op.add_column('messages', sa.Column('conversation_id', sa.String(), nullable=True))
    op.add_column('messages', sa.Column('user_name', sa.String(), nullable=True))
    op.alter_column('messages', 'id',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('messages', 'date',
               existing_type=postgresql.TIMESTAMP(precision=3),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('messages', 'message',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('messages', 'status',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               nullable=True)
    op.alter_column('messages', 'recipient',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               nullable=True)
    op.drop_constraint('messages_conversationId_fkey', 'messages', type_='foreignkey')
    op.create_foreign_key(None, 'messages', 'conversations', ['conversation_id'], ['id'])
    op.drop_column('messages', 'userName')
    op.drop_column('messages', 'conversationId')
    op.add_column('posts', sa.Column('title', sa.String(), nullable=False))
    op.add_column('posts', sa.Column('thesis', sa.String(), nullable=True))
    op.add_column('posts', sa.Column('yes_action', sa.String(), nullable=True))
    op.add_column('posts', sa.Column('maybe_action', sa.String(), nullable=True))
    op.add_column('posts', sa.Column('no_action', sa.String(), nullable=True))
    op.add_column('posts', sa.Column('categories', sa.JSON(), nullable=True))
    op.add_column('posts', sa.Column('owner_id', sa.String(), nullable=True))
    op.alter_column('posts', 'id',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('posts', 'content',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('posts', 'date',
               existing_type=postgresql.TIMESTAMP(precision=3),
               nullable=True)
    op.drop_constraint('posts_email_fkey', 'posts', type_='foreignkey')
    op.create_foreign_key(None, 'posts', 'users', ['owner_id'], ['id'])
    op.drop_column('posts', 'email')
    op.drop_column('posts', 'likes')
    op.add_column('users', sa.Column('blurhash', sa.String(), nullable=True))
    op.alter_column('users', 'id',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('users', 'email',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('users', 'username',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('users', 'bio',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.drop_index('users_email_key', table_name='users')
    op.create_unique_constraint(None, 'users', ['email'])
    op.drop_column('users', 'date')
    op.drop_column('users', 'location')
    op.drop_column('users', 'following')
    op.drop_column('users', 'followers')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('users', sa.Column('followers', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('following', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('location', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('date', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'users', type_='unique')
    op.create_index('users_email_key', 'users', ['email'], unique=True)
    op.alter_column('users', 'bio',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('users', 'username',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('users', 'email',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('users', 'id',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.drop_column('users', 'blurhash')
    op.add_column('posts', sa.Column('likes', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True))
    op.add_column('posts', sa.Column('email', sa.TEXT(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'posts', type_='foreignkey')
    op.create_foreign_key('posts_email_fkey', 'posts', 'users', ['email'], ['email'], onupdate='CASCADE', ondelete='SET NULL')
    op.alter_column('posts', 'date',
               existing_type=postgresql.TIMESTAMP(precision=3),
               nullable=False)
    op.alter_column('posts', 'content',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('posts', 'id',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.drop_column('posts', 'owner_id')
    op.drop_column('posts', 'categories')
    op.drop_column('posts', 'no_action')
    op.drop_column('posts', 'maybe_action')
    op.drop_column('posts', 'yes_action')
    op.drop_column('posts', 'thesis')
    op.drop_column('posts', 'title')
    op.add_column('messages', sa.Column('conversationId', sa.TEXT(), autoincrement=False, nullable=False))
    op.add_column('messages', sa.Column('userName', sa.TEXT(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'messages', type_='foreignkey')
    op.create_foreign_key('messages_conversationId_fkey', 'messages', 'conversations', ['conversationId'], ['id'], onupdate='CASCADE', ondelete='CASCADE')
    op.alter_column('messages', 'recipient',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               nullable=False)
    op.alter_column('messages', 'status',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               nullable=False)
    op.alter_column('messages', 'message',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('messages', 'date',
               existing_type=postgresql.TIMESTAMP(precision=3),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('messages', 'id',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.drop_column('messages', 'user_name')
    op.drop_column('messages', 'conversation_id')
    op.add_column('conversations', sa.Column('roomName', sa.TEXT(), autoincrement=False, nullable=False))
    op.alter_column('conversations', 'date',
               existing_type=postgresql.TIMESTAMP(precision=3),
               nullable=False)
    op.alter_column('conversations', 'recipient',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               nullable=False)
    op.alter_column('conversations', 'me',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               nullable=False)
    op.alter_column('conversations', 'id',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.drop_column('conversations', 'room_name')
    op.create_table('_prisma_migrations',
    sa.Column('id', sa.VARCHAR(length=36), autoincrement=False, nullable=False),
    sa.Column('checksum', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.Column('finished_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('migration_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('logs', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('rolled_back_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('started_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('applied_steps_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='_prisma_migrations_pkey')
    )
    op.create_table('Comment',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('comment', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('vote', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('postId', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('userId', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('username', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('date', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('parentId', sa.TEXT(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['parentId'], ['Comment.id'], name='Comment_parentId_fkey', onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['postId'], ['posts.id'], name='Comment_postId_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['userId'], ['users.id'], name='Comment_userId_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='Comment_pkey')
    )
    op.drop_table('votes')
    op.drop_table('post_voted')
    op.drop_table('post_likes')
    op.drop_table('post_dislikes')
    op.drop_table('comments')
    op.drop_table('bookmarks')
    op.drop_table('user_following')
    op.drop_table('user_followers')
    # ### end Alembic commands ###
